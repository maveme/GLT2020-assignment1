modeltype CCL uses 'http://glt.tue.nl/ccl';
modeltype GRAPH uses 'http://glt.tue.nl/graph';


transformation NewTransformation(in ccl : CCL, out GRAPH);

//Main method that starts the conversion process
main() {
	ccl.rootObjects()[CCL::CloudResources]->map ccl2graph();
}

//Method that maps a cloudresource to a graph and adds all the later created nodes to the nodes of the graph
mapping CCL::CloudResources::ccl2graph() : GRAPH::Graph {
	//Add the resource to the node
    nodes := self.resources -> map resource2boxNode();
    
    //Add for each machineImage, the machineimage, the region and the memory to the nodes
    //Note that these will have been created in the previous step
    var machineImages := getMachineImages();
    machineImages -> forEach(machineImage){
        nodes += machineImage -> map machineImage2boxNode();
        nodes += machineImage.region.map region2boxNode();
        nodes += machineImage.memory.toString().map memory2Node();
	};
	//Add for each computingImage the node with label "Computing", the osNode and the vcpuNode
	var computingImages := getComputingImage();
    computingImages -> forEach(computingImage){
    	nodes += computingImage.label.map TypeComputing2boxNode();
        nodes += computingImage.os.map os2Node();
        nodes += computingImage.vcpu.toString().map vcpu2Node();
    };
    //Add for each storageImage the node with label "Storage" and the dbEngineNode
    var storageImages := getStorageImage();
    storageImages -> forEach(storageImage){
    	nodes += storageImage.label.map TypeStorage2boxNode();
        nodes += storageImage.dbEngine.map dbEngine2Node();
    }
}

//Method that maps a resource. 
// And constructs edges between a resource and its corresponding machine images

mapping CCL::Resource::resource2boxNode() : GRAPH::Node {
	//Set the attributes of this node
	shape := GRAPH::Shape::BOX;
	label := self.label;
	//Loop over the machineImages and map them
	var machineImages := self.machineImages -> map machineImage2boxNode();
	//make edges from the resource to all the machine images
	machineImages -> forEach(machineImage){
		var toAddEdge := object GRAPH::Edge{style := GRAPH::Style::SOLID; target:= machineImage};
		outEdges += toAddEdge;
	}
}

//General method that disjuncts each machineImage into either a storageImage or ComputingImage

mapping CCL::MachineImage::machineImage2boxNode() : GRAPH::Node
disjuncts CCL::StorageImage::storageattr2nodes, CCL::ComputingImage::computingattr2nodes{
}

//Method that maps a storageImages to a node.
// It also maps the corresponding attributes of the storageImages to nodes in the graph
// And creates edges between them.
mapping CCL::StorageImage::storageattr2nodes() : GRAPH::Node {
	//Set the correct attributes of this node
	label := self.label.toString();
	shape := GRAPH::Shape::BOX;
	
	//map to a node with label "Storage" an add this node to the outedges of that created node
	var typeNode := self.label.map TypeStorage2boxNode();
	addEdgeToNode(typeNode, result);
	
	//Create a node for the DBengine of this storageImage and add a edge from the DBEngineNode to this storageImageNode		
	var dbEngineNode = self.dbEngine.map dbEngine2Node();
	var dbEngineEdge = object GRAPH::Edge{style := GRAPH::Style::DASHED; target:= dbEngineNode;};
	outEdges += dbEngineEdge;
	
	//Create a node for the memory of this storageImage and add a edge from the memoryNode to this storageImageNode	
	var memoryNode = self.memory.toString().map memory2Node();
	var memoryEdge = object GRAPH::Edge{style := GRAPH::Style::DASHED; target:= memoryNode;};
	outEdges += memoryEdge;
	
	//Map to the region of this node and add an edge from the region to the earlier created type of this node 
	// (This is the node with label "Storage")
	var region := self.region.map region2boxNode();
	addEdgeToNode(region, typeNode);
}

// Method that maps a computingImages to a node.
// It also maps the corresponding attributes of the computingImages to nodes in the graph
// And creates edges between them.
mapping CCL::ComputingImage::computingattr2nodes() : GRAPH::Node {
	//Set the correct attributes of this node
	label := self.label.toString();
	shape := GRAPH::Shape::BOX;
	
	//map to a node with label "Computing" an add this node to the outedges of that created node	
	var typeNode := self.label.map TypeComputing2boxNode();
	addEdgeToNode(typeNode, result);
	
	//Create a node for the vcpu of this computingImage and add a edge from the cpuNode to this computingImagenode
	var cpuNode = self.vcpu.toString().map vcpu2Node();
	var cpuEdge := object GRAPH::Edge{style := GRAPH::Style::DASHED; target:= cpuNode;};
	outEdges += cpuEdge;
	
	//Create a node for the os of this computingImage and add a edge from the osNode to this computingImagesNode
	var osNode = self.os.map os2Node();
	var osEdge := object GRAPH::Edge{style := GRAPH::Style::DASHED; target:= osNode;};
	outEdges += osEdge;
	
	//Create a node for the memory of this computingImage and add a edge from the memoryNode to this computingImagesNode
	var memoryNode = self.memory.toString().map memory2Node();
	var memoryEdge = object GRAPH::Edge{style := GRAPH::Style::DASHED; target:= memoryNode;};
	outEdges += memoryEdge;
	
	//Map to the region of this node and add an edge from the region to the earlier created type of this node 
	// (This is the node with label "Computing")
	var region := self.region.map region2boxNode();
	addEdgeToNode(region, typeNode);
	
}

//Mapping for the "node labeled Computing"
mapping String::TypeComputing2boxNode(): GRAPH::Node{
	label := "Computing";
	shape := GRAPH::Shape::BOX;
}

//Mapping for the "node labeled Storage"
mapping String::TypeStorage2boxNode(): GRAPH::Node{
	label := "Storage";
	shape := GRAPH::Shape::BOX;
}

//Mapping for a dbNode
mapping CCL::DBEngine::dbEngine2Node(): GRAPH::Node{
	label := self.toString(); 
	shape := GRAPH::Shape::OVAL 
}

//Mapping for a vcpuNode
mapping String::vcpu2Node() : GRAPH::Node {
	label := self + " cores"; 
	shape := GRAPH::Shape::OVAL 
}

//Mapping for a memoryNode
mapping String::memory2Node() : GRAPH::Node {
	label := self  + " GB"; 
	shape := GRAPH::Shape::OVAL 
}

//Mapping for a os2Node
mapping CCL::OperatingSystem::os2Node() : GRAPH::Node {
	label := self.toString(); 
	shape := GRAPH::Shape::OVAL;
}

//Mapping for a Region
mapping CCL::Region::region2boxNode() : GRAPH::Node {
	label := self.toString();
	shape := GRAPH::Shape::BOX;
}

//#######################################
// HELPERS
//#######################################

//Adds an edge from a source node to an targetNode
helper addEdgeToNode(inout sourceNode: GRAPH::Node, in targetNode: GRAPH::Node){
	var newEdge := object GRAPH::Edge{style := GRAPH::Style::SOLID; target:= targetNode};
	sourceNode.outEdges += newEdge;
}

//#######################################
// QUERIES
//#######################################

//Returns all the MachineImages
query getMachineImages() : Sequence(CCL::MachineImage) {
	return CCL::MachineImage.allInstances()->asSequence()
}

//Returns all the computingImages
query getComputingImage() : Sequence(CCL::ComputingImage) {
	return CCL::ComputingImage.allInstances()->asSequence()
}

//Returns all the storageImages
query getStorageImage() : Sequence(CCL::StorageImage) {
	return CCL::StorageImage.allInstances()->asSequence()
}